# -*- coding: utf-8 -*-
"""asc_comp1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sbjGK3vt08KLkcwwvQtrUQ6tt80SW5HB
"""

from matplotlib.pylab import gca, figure, plot, subplot, title, xlabel, ylabel, xlim, show, ylim
from matplotlib.lines import Line2D
import segmento
import crear
import extraer
import pandas as pd                    #Almacenamiento y anÃ¡lisis de datos 
import numpy as np
import joblib
from tensorflow import keras

def obtenerDatos(ruta):
    #Lectura de datos
    try:
        datos = pd.read_csv(ruta)
    except:
        print("No se pude abrir el archivo")
        return -1
    
    #Convierte fecha en marca de tiempo
    datos.index = datos["Date"].apply(lambda x: pd.Timestamp(x))
    #Remplaza la marca de tiempo como los indices de la matriz
    datos.drop("Date", axis=1, inplace=True)
    
    #print(datos)
    
    #devuelve una matriz con los datos
    return datos

def draw_plot_gral(datos, titulo):
    plot(range(len(datos)), datos, alpha=0.8, color='red')
    title(titulo)
    xlabel("Tiempo")
    ylabel("Precio")
    xlim(0, len(datos) - 1)

def draw_plot(datos, titulo, xlimite1, xlimite2, ylimite1, ylimite2):
    plot(range(len(datos)), datos, alpha=0.8, color='red')
    title(titulo)
    xlabel("Tiempo")
    ylabel("Precio")
    #xlim(0, len(datos) - 1)
    xlim(xlimite1, xlimite2)
    ylim(ylimite1, ylimite2)

def draw_segments(segmentos):
    ax = gca()
    for segment in segmentos:
        line = Line2D((segment[0],segment[2]),(segment[1],segment[3]))
        ax.add_line(line)

# Abrir el archivo con los precios de amazon
datos = obtenerDatos('amazon_5a.csv')
error_max = 15
desde = 0
hasta = len(datos['Close'])

# Parametrizar valores de los precios de 0 a 100
indice = 0
valor_max = max(datos['Close'])

for dato in datos['Close']:
    datos['Close'][indice] = (100*dato)/valor_max
    indice = indice + 1

#print(datos['Close'])


#Obtener grafica simplificada
segmentos = segmento.bottomup(datos['Close'][desde:hasta], error_max)

#Obtener proporciones
caracteristicas = extraer.proporciones(segmentos)

#Buscar patron
datos2 = datos['Close']
precio_cierre = datos2.tolist()
modelo = joblib.load('asc_comp1.pkl')
for c in range(len(caracteristicas)):
  entradas = caracteristicas[c]
  patron = modelo.predict([entradas])
  #clase = np.argmax(patron, axis = 1)
  #if clase != 3 and patron[0][clase] > 0.8:
  if patron[0] > 0.9:
    print("Caracteristica", c, caracteristicas[c])
    print("Patron: ", patron)
    #print("Clase: ", clase)
    #print("Probabilidad: ", patron[0][clase]) #0:descendente, 1:lateral, 2:ascendente, 3:complemento

    #Graficar patron
    xlimite1 = precio_cierre.index(segmentos[c][1])
    #print("Xlimite1: ", xlimite1)
    xlimite2 = precio_cierre.index(segmentos[c+7][1])
    #print("Xlimite2: ", xlimite2)
    y_valores = [segmentos[c][1], segmentos[c+1][1], segmentos[c+2][1], segmentos[c+3][1], segmentos[c+4][1], segmentos[c+5][1], segmentos[c+6][1], segmentos[c+7][1]]
    y_valores = np.asarray(y_valores)
    #print("Y_valores: ", y_valores)
    ind1 = np.unravel_index(np.argmin(y_valores, axis=None), y_valores.shape)
    #print("Ylimite1: ", y_valores[ind1])
    ind2 = np.unravel_index(np.argmax(y_valores, axis=None), y_valores.shape)
    #print("Ylimite2: ", y_valores[ind2])

    figure(figsize=(5, 5), dpi=80)
    draw_plot(datos['Close'][desde:hasta], "Patron", xlimite1-10, xlimite2+10, y_valores[ind1]-1, y_valores[ind2]+1)
    draw_segments(segmentos[c:c+7])
    show()

#Graficar precios
figure(figsize=(28, 8), dpi=80)
draw_plot_gral(datos['Close'][desde:hasta], "Bottom-up e interpolacion")
draw_segments(segmentos)
show()